import os
import pickle
import psycopg2
import numpy as np
import cv2
from deepface import DeepFace
import tkinter as tk
from tkinter import filedialog, Tk, messagebox
import threading
import traceback
import os

# ================= DATABASE CONFIG =================
DB_CONFIG = {
    "host": "127.0.0.1",
    "user": "postgres",
    "password": "huyyuh",   # ƒë·ªïi theo PostgreSQL c·ªßa b·∫°n
    "dbname": "cyber_verify_certificate",
    "port": 5432
}

def get_conn():
    return psycopg2.connect(**DB_CONFIG)

# ================= EMBEDDING FUNCTIONS =================
def get_embedding(image_path):
    try:
        rep = DeepFace.represent(img_path=image_path, model_name="Facenet", enforce_detection=False)
        return np.array(rep[0]['embedding'])
    except Exception as e:
        print(f"[‚ùå] Kh√¥ng th·ªÉ l·∫•y embedding: {e}")
        return None

def check_existing(key_id):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM face_embeddings WHERE key_id=%s", (key_id,))
    exists = cur.fetchone() is not None
    conn.close()
    return exists

def insert_embedding(ma_truong, ma_sv, key_id, embedding, image_path):
    conn = get_conn()
    cur = conn.cursor()
    emb_blob = pickle.dumps(embedding)
    cur.execute("""
        INSERT INTO face_embeddings (ma_truong, ma_sv, key_id, embedding, image_path)
        VALUES (%s, %s, %s, %s, %s)
        ON CONFLICT (key_id) DO UPDATE 
        SET embedding = EXCLUDED.embedding, image_path = EXCLUDED.image_path, created_at = CURRENT_TIMESTAMP;
    """, (ma_truong, ma_sv, key_id, emb_blob, image_path))
    conn.commit()
    conn.close()
    print(f"[‚úÖ] ƒê√£ l∆∞u ho·∫∑c c·∫≠p nh·∫≠t embedding cho {key_id}")

def load_all_embeddings():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT key_id, embedding FROM face_embeddings")
    data = {k: pickle.loads(v) for k, v in cur.fetchall()}
    conn.close()
    return data

# ================= IMAGE CAPTURE =================
def capture_image(save_path="temp_capture.jpg"):
    cap = cv2.VideoCapture(0)
    print("Nh·∫•n 's' ƒë·ªÉ ch·ª•p, 'q' ƒë·ªÉ tho√°t.")
    while True:
        ret, frame = cap.read()
        if not ret:
            continue
        cv2.imshow("Camera", frame)
        key = cv2.waitKey(1) & 0xFF
        if key == ord('s'):
            cv2.imwrite(save_path, frame)
            print(f"[üì∏] ƒê√£ l∆∞u ·∫£nh t·∫°m t·∫°i {save_path}")
            break
        elif key == ord('q'):
            save_path = None
            break
    cap.release()
    cv2.destroyAllWindows()
    return save_path

def select_file():
    try:
        root = tk.Tk()
        root.withdraw()

        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file",
            filetypes=[
                ("T·∫•t c·∫£ c√°c lo·∫°i file", "*.*"),
                ("·∫¢nh", "*.jpg *.jpeg *.png *.bmp *.gif"),
                ("VƒÉn b·∫£n", "*.txt *.pdf *.docx")
            ]
        )

        root.destroy()  # ‚úÖ Gi·∫£i ph√≥ng c·ª≠a s·ªï g·ªëc

        if not file_path:
            print("[‚ö†Ô∏è] B·∫°n ch∆∞a ch·ªçn file n√†o.")
            return None

        if not os.path.exists(file_path):
            print("[‚ùå] File kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.")
            return None

        print(f"[‚úÖ] File b·∫°n ƒë√£ ch·ªçn: {file_path}")
        return file_path

    except tk.TclError:
        print("[‚ùå] L·ªói giao di·ªán Tkinter (c√≥ th·ªÉ kh√¥ng h·ªó tr·ª£ GUI).")
        return None

    except Exception as e:
        print("[‚ùå] ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën:")
        traceback.print_exc()
        messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        return None

# ================= MAIN MENU =================
if __name__ == "__main__":
    print("=== ƒêƒÇNG K√ù KHU√îN M·∫∂T SINH VI√äN ===")
    ma_truong = input("Nh·∫≠p m√£ tr∆∞·ªùng: ").strip()
    ma_sv = input("Nh·∫≠p m√£ sinh vi√™n: ").strip()
    key_id = f"{ma_truong}_{ma_sv}"

    if check_existing(key_id):
        print(f"[‚ÑπÔ∏è] Sinh vi√™n {key_id} ƒë√£ ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥.")
        choice = input("B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t l·∫°i khu√¥n m·∫∑t? (y/n): ")
        if choice.lower() != 'y':
            exit()

    print("Ch·ªçn ngu·ªìn ·∫£nh:")
    print("1. M·ªü camera ch·ª•p tr·ª±c ti·∫øp")
    print("2. T·∫£i ·∫£nh t·ª´ m√°y t√≠nh")
    option = input("L·ª±a ch·ªçn (1/2): ").strip()

    if option == "1":
        image_path = capture_image()
    elif option == "2":
        image_path = select_file()
        if image_path:
            print(f"B·∫°n ƒë√£ ch·ªçn file: {image_path}")
        else:
            print("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn ho·∫∑c x·∫£y ra l·ªói.")
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        exit()

    embedding = get_embedding(image_path)
    if embedding is not None:
        insert_embedding(ma_truong, ma_sv, key_id, embedding, image_path)
    else:
        print("‚ùå Kh√¥ng th·ªÉ sinh embedding t·ª´ ·∫£nh n√†y.")
